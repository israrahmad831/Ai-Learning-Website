# Code With AI - Project Requirements

## 1.2 Purpose

The purpose of this project is to provide a **user-friendly and interactive learning platform** for university students and beginners in programming. The web-based application will include:

- **AI-powered tutor** for daily lessons.
- **10 practical coding examples** per lesson.
- **Interactive testing of learned concepts**.
- **Communication system** for students and teachers.
- **Support for multiple programming languages** (Java, Python, Node.js, PHP, Dart, C++, etc.).

### **User Roles:**

1. **Student/User**: Learns programming from AI-generated lessons, examples, and tests their skills.
2. **Teacher**: Adds and manages lessons, responds to student queries.
3. **Administrator**: Manages users, teachers, lessons, and platform functionalities.

## 1.3 Document Conventions

- **User:** Any student who registers to learn programming.
- **Teacher:** Adds topics and interacts with students.
- **Admin:** Full control over the system, including user management.

## 1.4 Project Objectives

The application will:

- Be **visually appealing and user-friendly**.
- **Ensure high performance** with optimized backend services.
- Support **interactive learning** with examples and tests.
- Provide **real-time chat for discussions**.
- Enable **teachers to add lesson content** easily.

## 1.5 Intended Audience

- **University students** aiming to learn programming.
- **Beginners in programming**.
- **Educators** who want to teach programming interactively.

## 1.6 Project Scope

- **Group-based interactive learning** with AI-generated lessons.
- **Personalized tutor avatars** for engagement.
- **Real-time chat system** for student-teacher communication.
- **Admin dashboard** to manage users, lessons, and reports.
- **AI-generated text-based lessons** (not AI-generated videos).

---

# **2. Overall Description**

## **2.1 Product Perspective**

- The system is a **web-based MERN stack application**.
- It includes a **responsive admin panel** for management.
- Users learn through **daily AI-generated text lessons with examples**.
- Teachers can **add/edit lessons and solve student queries**.
- Admins **track student progress and manage users**.

## **2.2 Product Features**

### **Students**

- Access **daily AI-generated programming lessons**.
- View **10 coding examples** per lesson.
- Test **recently learned topics**.
- Participate in **group discussions** with teachers and classmates.

### **Teachers**

- Register and log in.
- Add and manage lesson titles.
- Respond to student queries.
- Monitor student progress.

### **Administrators**

- Manage users (students, teachers, admins).
- Add/edit/delete teacher avatars.
- Track student progress.
- Moderate discussions.
- Review feedback and ratings.
- Manage system security.

## **2.3 User Classes and Characteristics**

| **User Type**     | **Role**                                                                                |
| ----------------- | --------------------------------------------------------------------------------------- |
| **Student**       | Learn programming, access AI-generated lessons, take tests, communicate in discussions. |
| **Teacher**       | Add/edit lessons, answer student queries, participate in discussions.                   |
| **Administrator** | Manage platform, users, content, track progress, and handle security.                   |

## **2.5 Design and Implementation Constraints**

- **Tech Stack**: MERN (MongoDB, Express.js, React.js, Node.js)
- **AI Integration**: OpenAI API for generating text-based lessons.
- **Real-time Communication**: WebSockets for chat.
- **Database Management**: MongoDB for structured data storage.

## **2.6 User Documentation**

- Simple and intuitive UI with easy navigation.
- Register/login using email and password.
- AI-generated lessons automatically available for students.
- Teachers and admins manage content through dashboards.

## **2.7 Assumptions and Dependencies**

- The AI-generated lessons will be **text-based with code snippets**.
- **No AI-generated video lectures** (to maintain feasibility).
- Internet access is required to use the platform.

---

# **3. System Features**

## **3.1 Student Requirements**

- **Register/Login** to access the system.
- **Choose a programming language** to learn.
- **Access AI-generated lessons**.
- **View 10 code examples per lesson**.
- **Participate in discussions with teachers and classmates**.

## **3.2 Teacher Requirements**

- **Register/Login** with admin approval.
- **Add/edit lesson titles**.


- **Respond to student queries**.
- **Track student progress**.
- **Participate in discussions**.

## **3.3 Administrator Requirements**

- **Full system control** (users, content, discussions).
- **Manage students and teachers** (add, edit, delete, activate, deactivate).
- **Monitor student progress and lesson engagement**.
- **Check ratings and feedback**.
- **Moderate discussions and resolve issues**.
- **Ensure platform security**.

## **3.4 Security Features**

- **User authentication with JWT**.
- **Role-based access control** (Student, Teacher, Admin).
- **Encrypted database for sensitive data**.
- **Prevent unauthorized access to admin functionalities**.

---

# **4. External Interface Requirements**

## **4.1 User Interfaces**

- **Student Dashboard**: Lessons, quizzes, chat, progress tracking.
- **Teacher Dashboard**: Lesson management, student queries.
- **Admin Panel**: User management, system monitoring.

## **4.2 Communications Interfaces**

- **REST API** for backend communication.
- **WebSockets** for real-time chat.
- **Secure authentication and authorization**.

---

# **5. Non-functional Requirements**

## **5.1 Performance Requirements**

- **Fast response times** (<2s per API call).
- **Scalability** for high user concurrency.
- **Efficient data storage and retrieval**.

## **5.2 Safety Requirements**

- **Data encryption for sensitive information**.
- **Protection against SQL injection, XSS, and CSRF attacks**.

## **5.3 Security Requirements**

- **Role-based access control**.
- **Secure authentication and password encryption**.

## **5.4 Software Quality Attributes**

- **User-friendly UI** with modern design.
- **Cross-platform compatibility** (desktop, mobile).
- **Accessibility features** for all users.

---

# **6. Sitemap of Web Application**

```
/ (Homepage)
 â”œâ”€â”€ /register (User Registration)
 â”œâ”€â”€ /login (User Login)
 â”œâ”€â”€ /dashboard (User Dashboard)
 â”‚     â”œâ”€â”€ /lessons (Daily AI-generated lessons)
 â”‚     â”œâ”€â”€ /examples (10 examples per lesson)
 â”‚     â”œâ”€â”€ /test (Programming tests)
 â”‚     â”œâ”€â”€ /chat (Discussion forum)
 â”œâ”€â”€ /teacher-dashboard (Manage lessons & student queries)
 â”œâ”€â”€ /admin-panel (Manage users, lessons, discussions, reports)
```

---

This refined version removes **impossible features** like AI-generated video tutorials and organizes **clear requirements** for each user type. Let me know if you need modifications! ðŸš€

